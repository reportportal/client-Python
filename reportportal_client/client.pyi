from requests import Session
from typing import Any, Dict, List, Optional, Text, Tuple, Union
from reportportal_client.core.log_manager import LogManager as LogManager
from reportportal_client.core.test_manager import TestManager as TestManager

class RPClient:
    _log_manager: LogManager = ...
    _test_manager: TestManager = ...
    api_v1: Text = ...
    api_v2: Text = ...
    base_url_v1: Text = ...
    base_url_v2: Text = ...
    endpoint: Text = ...
    is_skipped_an_issue: bool = ...
    launch_id: Text = ...
    log_batch_size: int = ...
    project: Text = ...
    token: Text = ...
    verify_ssl: bool = ...
    session: Session = ...
    def __init__(self,
                 endpoint: Text,
                 project: Text, token: Text,
                 log_batch_size: int = ...,
                 is_skipped_an_issue: bool = ...,
                 verify_ssl: bool = ...,
                 retries: int = ...,
                 max_pool_size: int = ...,
                 launch_id: Text = ...) -> None: ...
    def finish_launch(self,
                      end_time: Text,
                      status: Text = ...,
                      attributes: List = ...,
                      **kwargs: Any) -> Dict: ...
    def finish_test_item(self,
                    item_id: Text,
                    end_time: Text,
                    status: Text,
                    issue: Text = ...,
                    attributes: List = ...,
                    **kwargs: Any) -> None: ...
    def get_project_settings(self) -> Dict: ...
    def log(self,
            time: Text,
            message: Text,
            level: Optional[Union[int, Text]] = ...,
            attachment: Optional[Dict] = ...,
            item_id: Optional[Text] = ...) -> None: ...
    def start_launch(self,
                     name: Text,
                     start_time: Text,
                     description: Text = ...,
                     attributes: List = ...,
                     mode: Text = ...,
                     rerun: bool = ...,
                     rerun_of: Text = ...,
                     **kwargs: Any) -> Text: ...
    def start_test_item(self,
                   name: Text,
                   start_time: Text,
                   item_type: Text,
                   description: Text = ...,
                   attributes: List = ...,
                   parameters: dict = ...,
                   parent_item_id: Text = ...,
                   has_stats: bool = ...,
                   code_ref: Text = ...,
                   **kwargs: Any) -> Text: ...
    def terminate(self, *args: Tuple, **kwargs: Any) -> None: ...
