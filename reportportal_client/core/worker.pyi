from aenum import Enum
from logging import Logger
from threading import Thread
from queue import PriorityQueue, Queue
from reportportal_client.core.rp_requests import RPRequest as RPRequest
from typing import Any, Optional, Text

logger: Logger

class ControlCommand(Enum):
    CLEAR_QUEUE: Any = ...
    NOP: Any = ...
    REPORT_STATUS: Any = ...
    STOP: Any = ...
    STOP_IMMEDIATE: Any = ...
    def is_stop_cmd(self) -> bool: ...

class APIWorker:
    _cmd_queue: Queue = ...
    _data_queue: PriorityQueue = ...
    _thread: Optional[Thread] = ...
    name: Text = ...
    def __init__(self, cmd_queue: Queue, data_queue: PriorityQueue) -> None: ...
    def _command_get(self) -> Optional[ControlCommand]: ...
    def _command_process(self, cmd: Optional[ControlCommand]) -> None: ...
    def _monitor(self) -> None: ...
    def _request_get(self) -> Optional[RPRequest]: ...
    def _request_process(self, request: Optional[RPRequest]) -> None: ...
    def _stop(self) -> None: ...
    def is_alive(self) -> bool: ...
    def send_command(self, cmd: ControlCommand) -> Any: ...
    def send_request(self, request: RPRequest) -> Any: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def stop_immediate(self) -> None: ...
